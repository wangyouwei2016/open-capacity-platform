<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.open.capacity</groupId>
    <artifactId>business-center</artifactId>
    <version>2.0.1</version>
  </parent>
  <artifactId>file-center</artifactId>
  <description>文件中心</description>
	<name>file-center</name>
	<packaging>jar</packaging>
		
  <dependencies>
  
  		<!-- 关系型数据库配置 -->
	 	<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>db-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 非关系型数据库配置 -->
  		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>redis-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 日志中心配置 -->
		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>log-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 公共实体配置 -->
  		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>common-spring-boot-starter</artifactId>
  		</dependency>
  		
  		<!-- 资源服务器配置 -->
  		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>uaa-client-spring-boot-starter</artifactId>
  		</dependency>
		
		<!-- API文档配置 -->
		<dependency>
  			<groupId>com.open.capacity</groupId>
  			<artifactId>swagger-spring-boot-starter</artifactId>
  		</dependency>

		<!-- WEB守护进程启动springboot -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

	
 		<!-- spring boot 端点监控 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

	  <!--华为云OBS依赖-->
	  <dependency>
		  <groupId>com.huaweicloud</groupId>
		  <artifactId>esdk-obs-java-bundle</artifactId>
		  <version>3.21.11</version>
	  </dependency>
		
		
		<!-- fastDFS -->
        <dependency>
            <groupId>com.github.tobato</groupId>
            <artifactId>fastdfs-client</artifactId>
            <version>1.26.5</version>
        </dependency>
		<dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-test</artifactId>
          <scope>compile</scope>
        </dependency>
		<!-- 选用eureka时打开-->
		<!--<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>-->

	  <dependency>
		  <groupId>com.huaweicloud</groupId>
		  <artifactId>spring-cloud-starter-huawei-service-engine-gateway</artifactId>
		  <version>1.6.1-Greenwich</version>
		  <exclusions>
			  <exclusion>
				  <groupId>com.huaweicloud</groupId>
				  <artifactId>spring-cloud-starter-huawei-swagger</artifactId>
			  </exclusion>
		  </exclusions>
	  </dependency>

	</dependencies>


	<!-- 形成带第三方jar包的可执行jar包，jar包目录结构如下 application.properties lib META-INF mybatis 
		org -->
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>2.1.6.RELEASE</version>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<!-- 首先加入pom ${docker.image.prefix} ： 这个是你的dockerhub注册上面的名字 gitgeek 这个是我注册的
				${project.artifactId} ： 项目的名称 dockerDirectory ： dockerfile的文件路径 -->
			<!--<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
					<dockerDirectory>src/main/docker</dockerDirectory>
					&lt;!&ndash; docker远程服务器地址 &ndash;&gt;
					<dockerHost>${docker.host}</dockerHost>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
				</configuration>
			</plugin>-->

		</plugins>
		<finalName>${project.artifactId}</finalName>
	</build>

  
</project>